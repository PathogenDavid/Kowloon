@page "/admin"
@using Kowloon.Core;

<h1>Test Patterns</h1>

@foreach (IRenderer renderer in Program.Kowloon.TestRenderers)
{
    <button class="@PatternButtonClass(renderer)" @onclick="e => Program.Kowloon.SetTestRenderer(renderer)">@renderer.GetType().Name</button>

    @if (renderer is IRangedTest rangedTest)
    {
        <input class="@PatternButtonClass(renderer)" type="number" value="@rangedTest.Value" @onchange="e => UpdateRangedTest(rangedTest, e.Value?.ToString())" />
    }

    <br>
}
<button class="@PatternButtonClass(null)" @onclick="e => Program.Kowloon.DisableTestRenderer()" style="font-weight: bold">Resume normal operation</button><br>

<h1>Settings</h1>

Brightness: <input type="number" value="@Program.Kowloon.Brightness" @onchange="e => UpdateBrightness(e.Value?.ToString())" /><br>

Palette:
<select @onchange="e => ChangePalette(e.Value?.ToString())">
@{
    int paletteIndex = 0;
}
@foreach (Palette palette in KowloonConfig.Palettes)
{
    <option value="@(paletteIndex)" selected="@(Program.Kowloon.Apartments.CurrentPalette == palette)">@(palette.Name)</option>
    paletteIndex++;
}
</select><br>

Animation mode:
<select @onchange="e => ChangeAnimationMode(e.Value?.ToString())">
@foreach (ApartmentAnimationMode animationMode in Enum.GetValues(typeof(ApartmentAnimationMode)))
{
    <option selected="@(Program.Kowloon.Apartments.AnimationMode == animationMode)">@(animationMode)</option>
}
</select><br>

Flicker strength: <input type="number" value="@Program.Kowloon.Apartments.FlickerStrength" @onchange="e => ChangeFlickerStrength(e.Value?.ToString())" /><br>

<h1>Misc</h1>

<button @onclick="e => Program.Kowloon.Apartments.ScrambleColors()">Scramble Colors</button><br>
<button @onclick="e => Program.Kowloon.Apartments.ScrambleLitColors()">Scramble Currently Lit Colors</button><br>

@code
{
    private string PatternButtonClass(IRenderer renderer)
        => Program.Kowloon.CurrentTestRenderer == renderer ? "selected" : "";

    private static void UpdateRangedTest(IRangedTest rangedTest, string newValue)
    {
        if (int.TryParse(newValue, out int newIntegerValue))
        { UpdateRangedTest(rangedTest, newIntegerValue); }
        else
        { Console.Error.WriteLine($"Received invalid ranged value for {rangedTest.GetType()}, request ignored."); }
    }

    private static void UpdateRangedTest(IRangedTest rangedTest, int newValue)
    {
        Program.Kowloon.SetTestRenderer(rangedTest);

        if (newValue < rangedTest.MinimumValue)
        { newValue = rangedTest.MaximumValue - 1; }
        else if (newValue >= rangedTest.MaximumValue)
        { newValue = rangedTest.MinimumValue; }

        rangedTest.Value = newValue;
    }

    private static void UpdateBrightness(string newBrightness)
    {
        if (byte.TryParse(newBrightness, out byte newBrightnessValue))
        { Program.Kowloon.Brightness = newBrightnessValue; }
        else
        { Console.Error.WriteLine($"Received invalid brightness value, request ignored."); }
    }

    private static void ChangePalette(string newPaletteIndex)
    {
        int newPaletteIndexValue;

        if (!int.TryParse(newPaletteIndex, out newPaletteIndexValue) || newPaletteIndexValue < 0 || newPaletteIndexValue >= KowloonConfig.Palettes.Count)
        {
            Console.Error.WriteLine("Received invalid palette index value, request ignored.");
            return;
        }

        Program.Kowloon.Apartments.CurrentPalette = KowloonConfig.Palettes[newPaletteIndexValue];
    }

    private static void ChangeAnimationMode(string newAnimationMode)
    {
        if (Enum.TryParse<ApartmentAnimationMode>(newAnimationMode, out ApartmentAnimationMode newAnimationModeValue))
        { Program.Kowloon.Apartments.AnimationMode = newAnimationModeValue; }
        else
        { Console.Error.WriteLine("Received invalid animation mode value, request ignored."); }
    }

    private static void ChangeFlickerStrength(string newFlickerStrength)
    {
        if (byte.TryParse(newFlickerStrength, out byte newFlickerStrengthValue))
        { Program.Kowloon.Apartments.FlickerStrength = newFlickerStrengthValue; }
        else
        { Console.Error.WriteLine($"Received invalid flicker strength value, request ignored."); }
    }
}
